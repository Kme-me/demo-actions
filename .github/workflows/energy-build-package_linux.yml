name: Energy Build and Package Linux

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  Linux-32:
    runs-on: ${{ matrix.operating-system }}

    strategy:
      matrix:
        operating-system: [ ubuntu-20.04 ]
        include:
          - arch: i386
            distro: ubuntu:18.04

    steps:
      - uses: actions/checkout@v4

      - name: Config Base Environment  # 配置基础环境
        run: |
          mkdir $RUNNER_WORKSPACE/install
          mv ./.github/shell $RUNNER_WORKSPACE/shell
          chmod -R +x $RUNNER_WORKSPACE/shell

      - name: Container Build and Package
        uses: uraimo/run-on-arch-action@v2
        id: build
        with:
          arch: none
          distro: none
          base_image: ${{ matrix.arch }}/${{ matrix.distro }}

          githubToken: ${{ github.token }} # 不需要，但可加快构建速度

          dockerRunArgs: | # 挂载目录 固定 /app
            --volume "$RUNNER_WORKSPACE:/app"

          env: | # 预配置
            BuildARCH: 386
            ENERGY_HOME: /app/EnergyFramework
            GoVer: go1.20.14.linux-386.tar.gz
            CEFVer: 101.0.18
            LibLCLVer: 2.5.0
            UseGTK3: ""

          shell: /bin/bash # 在容器中运行命令的shell

          install: | #在容器中安装一些依赖项
            apt-get update -q -y
            apt-get install -q -y git wget curl p7zip-full
            apt-get install -q -y make binutils build-essential gdb subversion zip unzip libx11-dev libgtk2.0-dev libgdk-pixbuf2.0-dev libcairo2-dev libpango1.0-dev libgtk-3-dev

          run: | # run 在容器中运行的命令
            # 1. 预设置全局Go环境变量
            export GOBIN=/app/go/bin
            export PATH=$PATH:/app/go/bin
            
            # 2. 安装当前系统架构的 Golang, https://golang.google.cn/dl/
            /app/shell/install-go.sh $GoVer

            # 3. 安装 energy
            /app/shell/install-energy.sh
            
            # 4. 安装 EnergyFramework, 该脚本 有3个参数, 1: CEF 版本, 2: liblcl 版本, 3: 可选 "" 或 gtk3
            # CEF: https://sourceforge.net/projects/liblcl/files/CEF
            # LibLCL: https://sourceforge.net/projects/liblcl/files
            /app/shell/install-energy-framework.sh $CEFVer $LibLCLVer

            # 5. 开始构建和打包项目
            cd /app/demo-actions
            go env -w GOFLAGS=-buildvcs=false
            go mod tidy
            energy build -o demo
            energy package -f demo -o demo-linux32.deb
            file demo
            
            # 6. 将安装包移动到 /app/install 目录
            mv /app/demo-actions/build/linux/demo-linux32.deb  /app/install

      - name: Build and Package END
        run: |
          ls -l $RUNNER_WORKSPACE/install

      - name: Release Dynamic library # 版本发布上传liblcl二进制
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ../install/**


  Linux-64:
    runs-on: ${{ matrix.operating-system }}

    strategy:
      matrix:
        operating-system: [ ubuntu-20.04 ]
        include:
          - arch: amd64
            distro: ubuntu:18.04

    steps:
      - uses: actions/checkout@v4

      - name: Config Base Environment  # 配置基础环境
        run: |
          mkdir $RUNNER_WORKSPACE/install
          mv ./.github/shell $RUNNER_WORKSPACE/shell
          chmod -R +x $RUNNER_WORKSPACE/shell

      - name: Container Build and Package
        uses: uraimo/run-on-arch-action@v2
        id: build
        with:
          arch: none
          distro: none
          base_image: ${{ matrix.arch }}/${{ matrix.distro }}

          githubToken: ${{ github.token }} # 不需要，但可加快构建速度

          dockerRunArgs: | # 挂载目录 固定 /app
            --volume "$RUNNER_WORKSPACE:/app"

          env: | # 预配置
            GoVer: go1.20.14.linux-amd64.tar.gz

          shell: /bin/bash # 在容器中运行命令的shell

          install: | #在容器中安装一些依赖项, 实际没全用上
            apt-get update -q -y
            apt-get install -q -y git wget p7zip-full
            apt-get install -q -y make binutils build-essential gdb subversion zip unzip libx11-dev libgtk2.0-dev libgdk-pixbuf2.0-dev libcairo2-dev libpango1.0-dev libgtk-3-dev

          run: | # run 在容器中运行的命令
            # 注意 “demo-actions” 是实际的仓库（文件夹）名

            # 1. 预设置全局Go环境变量
            export GOBIN=/app/go/bin
            export PATH=$PATH:/app/go/bin

            # 2. 安装当前系统架构的 Golang, https://golang.google.cn/dl/
            # 因为需要构建 energy cli
            /app/shell/install-go.sh $GoVer

            # 3. 安装 energy
            /app/shell/install-energy.sh

            # 4. 安装 开发环境 使用最新版本
            energy install --all
            energy env

            # 5. 开始构建和打包项目
            cd /app/demo-actions
            # 要设置一下
            go env -w GOFLAGS=-buildvcs=false
            energy build -o demo
            energy package -f demo -o demo-app64.deb
            file demo

            # 6. 将安装包移动到 /app/install 目录
            mv /app/demo-actions/build/linux/demo-app64.deb  /app/install

      - name: Build and Package END
        run: |
          ls -l $RUNNER_WORKSPACE/install

      - name: Release Dynamic library # 版本发布上传liblcl二进制
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ../install/**


  Linux-arm64:
    runs-on: ${{ matrix.operating-system }}

    strategy:
      matrix:
        operating-system: [ ubuntu-20.04 ]
        include:
          - arch: arm64v8
            distro: ubuntu:18.04

    steps:
      - uses: actions/checkout@v4

      - name: Config Base Environment
        run: |
          mkdir $RUNNER_WORKSPACE/install
          mv ./.github/shell $RUNNER_WORKSPACE/shell
          chmod -R +x $RUNNER_WORKSPACE/shell

      - name: Container Build and Package
        uses: uraimo/run-on-arch-action@v2
        id: build
        with:
          arch: none
          distro: none
          base_image: ${{ matrix.arch }}/${{ matrix.distro }}

          githubToken: ${{ github.token }}

          dockerRunArgs: |
            --volume "$RUNNER_WORKSPACE:/app"

          env: |
            GoVer: go1.20.14.linux-arm64.tar.gz

          shell: /bin/bash

          install: |
            apt-get update -q -y
            apt-get install -q -y git wget p7zip-full
            apt-get install -q -y make binutils build-essential gdb subversion zip unzip libx11-dev libgtk2.0-dev libgdk-pixbuf2.0-dev libcairo2-dev libpango1.0-dev libgtk-3-dev

          run: |
            export GOBIN=/app/go/bin
            export PATH=$PATH:/app/go/bin

            /app/shell/install-go.sh $GoVer

            /app/shell/install-energy.sh

            energy install --all
            energy env

            cd /app/demo-actions
            go env -w GOFLAGS=-buildvcs=false
            energy build -o demo
            file demo
            energy package -f demo -o demo-apparm64.deb

            mv /app/demo-actions/build/linux/demo-apparm64.deb  /app/install

      - name: Build and Package END
        run: |
          ls -l $RUNNER_WORKSPACE/install

      - name: Release Dynamic library
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ../install/**